apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }} 
  labels:
    name: {{ .Values.name }} 
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      name: {{ .Values.name }} 
  template:
    metadata:
      labels:
        name: {{ .Values.name }} 
    spec:
      containers:
        - name: {{ .Values.name }} 
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}

          # RESOURCES
          {{- if .Values.resources }}
          resources:
            requests:
              memory: {{ .Values.resources.requests.memory }}
              cpu: {{ .Values.resources.requests.cpu }}
            limits:
              memory: {{ .Values.resources.limits.memory }}
              cpu: {{ .Values.resources.limits.cpu }}
          {{- end }}

          # IMG PULL SECRET
          {{- if .Values.imagePullSecrets }}    
          imagePullSecrets:
            {{- range .Values.imagePullSecrets }}
              {{ .  }}            
            {{- end }}
          {{- end }}

          # PORTS
          ports:
          {{- range .Values.ports }}
            - name: http
              containerPort: {{ . }}
              protocol: TCP
          {{- end }}

          # ENV VARIABLES
          {{- if or .Values.env .Values.secretEnv }}
          env:
            # Chart-based environment variables
            {{- range $key, $value :=  .Values.env }}
            - name: {{$key }}
              value: {{ $value }}
            {{- end }}
            # Secret-based environment variables
            {{- range $key, $secret := .Values.secretEnv }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret.name }}
                  key: {{ $secret.key }}
            {{- end }}
            {{- end }}
            # end of env 

          # STORAGE
          # all templating for volumes, keep together so one if statement
          {{- if or .Values.volumes .Values.configData }}    
          volumeMounts:
            {{- range .Values.volumes }}
            - mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
              name: {{ .name }}-volume
            {{- end }}
            - mountPath: {{ .Values.configData.path }}
              name: config-volume
             

      volumes:
        # attaching volume as pvc
        - name: {{ .Values.name }}-volume
          persistentVolumeClaim:
            claimName: {{ .Values.name }}-pvc
        # attaching volume that stores config map
        - name: config-volume
          configMap:
            name: {{ .Values.name}}-cm
          {{- end }}